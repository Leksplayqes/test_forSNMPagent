"""Widgets exposing auxiliary backend utilities."""
from __future__ import annotations

import streamlit as st

from api import util_check_conf, util_check_hash, util_fpga_reload


def render_utils(api_base: str) -> None:
    st.header("–£—Ç–∏–ª–∏—Ç—ã (–∏–∑ checkFunctions)")

    with st.expander("üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (check_conf)", expanded=True):
        ip = st.text_input(
            "IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–ª—è check_conf)",
            key="util_cc_ip",
            value=(st.session_state.get("device_info") or {}).get("ipaddr", ""),
        )
        pw = st.text_input(
            "–ü–∞—Ä–æ–ª—å (–¥–ª—è check_conf)",
            type="password",
            key="util_cc_pw",
            value=st.session_state.get("password_input", ""),
        )
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å check_conf"):
            res = util_check_conf(api_base, ip, pw)
            if res and res.get("success"):
                st.success("–ì–æ—Ç–æ–≤–æ")
                st.json(res.get("result"))
            else:
                st.error(res.get("error") if res else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")

    with st.expander("üßÆ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ MD5 (check_hash)"):
        d1 = st.text_input("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è A (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)", key="util_h_a")
        d2 = st.text_input("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è B (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)", key="util_h_b")
        if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å"):
            if not d1 or not d2:
                st.warning("–£–∫–∞–∂–∏—Ç–µ –æ–±–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            else:
                res = util_check_hash(api_base, d1, d2)
                if res and res.get("success"):
                    st.success("OK")
                    st.json(res.get("result"))
                else:
                    st.error(res.get("error") if res else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")

    with st.expander("üîÅ FPGA reload (check_KSequal.fpga_reload)"):
        ip2 = st.text_input(
            "IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–ª—è fpga_reload)",
            key="util_fpga_ip",
            value=(st.session_state.get("device_info") or {}).get("ipaddr", ""),
        )
        pw2 = st.text_input(
            "–ü–∞—Ä–æ–ª—å (–¥–ª—è fpga_reload)",
            type="password",
            key="util_fpga_pw",
            value=st.session_state.get("password_input", ""),
        )
        slot = st.number_input("–°–ª–æ—Ç", min_value=1, max_value=16, value=9, step=1, key="util_fpga_slot")
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å fpga_reload"):
            res = util_fpga_reload(api_base, ip2, pw2, int(slot))
            if res and res.get("success"):
                st.success("–ì–æ—Ç–æ–≤–æ")
                st.json(res.get("result"))
            else:
                st.error(res.get("error") if res else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
